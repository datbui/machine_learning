clear all; close all;pkg load statistics;[x1, x2, x3, x4, x5, x6, x7, x8, y] = textread('yeast_train.txt', '%f,%f,%f,%f,%f,%f,%f,%f,%s');train = [x1 x2 x3 x4 x5 x6 x7 x8];u_label = unique(y);label_train  = str2num4label(y, u_label);str_label_train = y;[x1, x2, x3, x4, x5, x6, x7, x8, y] = textread('yeast_test.txt', '%f,%f,%f,%f,%f,%f,%f,%f,%s');test = [x1 x2 x3 x4 x5 x6 x7 x8];label_test  = str2num4label(y, u_label);str_label_test = y;train = normalize(train);test = normalize(test);s = rows(test);knn = 19;prediction = myKnn(train, test, label_train, knn);E = sum(1-(prediction'==label_test))./s;fprintf('\n Error = %f\n', E);str_prediction = num2str4label(prediction', u_label);%disp('Predictions  and actual result');%for i = 1:length(str_prediction)%  fprintf('\n%s %s\n',str_prediction(i){1}, str_label_train(i){1});%endforfprintf('correctPredictions = %d', sum(prediction'==label_test));y=1;k_fold=10;knn = [1:20];for y = 1:length(knn)  CVO = cvpartition(label_train, 'KFold', k_fold);  numSets = get(CVO,'NumTestSets');  c = struct(CVO).inds;  err = zeros(numSets, 1);  for i = 1:numSets      trIdx = myTraining(c, i);        teIdx = myTest(c, i);        s = get(CVO, 'TestSize')(i);        predict = myKnn(train(trIdx, :), train(teIdx, :), label_train(trIdx, :), knn(y));        err(i) = sum(1-(predict'==label_train(teIdx, :)))./s;  endfor  k_fold_error(y) = sum(err)/numSets;  fprintf('\n knn =%.2d cross-validation error = %f\n', knn(y), k_fold_error(y));endformin_k_fold_error  = min(k_fold_error);k_nn_idx = find(k_fold_error == min_k_fold_error);fprintf('\n knn=%d with min cross-validation = %f\n', k_nn_idx+4, min_k_fold_error);figure 1;plot(knn, k_fold_error);title('Plot the cross-validation error depends on k nearest neighbours');xlabel('k for nearest neighbour');ylabel('cross-validation error');% PART 2for i =1:length(knn)  prediction = myKnn(train, test, label_train, knn(i));  ERROR(i) = sum(1-(prediction'==label_test))./s;endforfigure 2;plot(knn, ERROR);title('Plot the test-set accuracy');xlabel('k for nearest neighbour');ylabel('Error');legend('Error function');for i =1:length(u_label)  fprintf('%s ', u_label(i){1});endforknn = [1, 5, 10, 15, 20];prediction_by_k = zeros(length(label_test), length(knn));for i =1:length(knn)  prediction = myKnn(train, test, label_train, knn(i));  prediction_by_k(:,i) = prediction;  [a,b]=hist(prediction,unique(prediction));  disp(a);  disp(b);  ERROR(i) = sum(1-(prediction'==label_test))./s;endforknn = [1, 15];for z = 1:length(knn)  fprintf('\n\nFor k %d\n', knn(z));  confusion_matrix = zeros(10,10);  prediction = myKnn(train, test, label_train, knn(z));  for i =1:10    ac = find(label_test == i);     for y =1:10      pr = find(prediction == y);      pr = pr';       confusion_matrix(i, y) = sum(ismember(ac,pr));    endfor  endfor  disp(confusion_matrix);endfor